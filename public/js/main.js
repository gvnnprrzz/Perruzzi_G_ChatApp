// imports will always go at the top
import ChatMsg from './components/ChatMessage.js';

const socket = io();

// Utility functions for socket
function setUserID({ sID }) {
    // Save our unique ID generated by Socket on the server side - this is how we track individual connections to the chat service
    vm.socketID = sID;
}

function showNewMessage({ message }) {
    // Get the current timestamp
    const timestamp = new Date().toLocaleTimeString();

    // Create a message object with timestamp
    const messageWithTimestamp = {
        timestamp,
        content: message.content,
        name: message.name,
    };

    vm.messages.push(messageWithTimestamp);
}

function handleUserTyping(user) {
    console.log('Somebody is typing something');
}

const { createApp } = Vue;

const vm = createApp({
    data() {
        return {
            socketID: '',
            message: '',
            messages: [],
            nickname: '',
            usersTyping: [], // Add a new property to track users who are typing
        };
    },    

    computed: {
        // Compute the "typing" status for users
        userTypingStatus() {
            if (this.usersTyping.length === 0) {
                return ''; // No one is typing
            } else if (this.usersTyping.length === 1) {
                return `${this.usersTyping[0]} is typing...`; // One user is typing
            } else {
                return 'Several people are typing...'; // Multiple users are typing
            }
        },
    },

    methods: {
        dispatchMessage() {
            // Input validation
            const trimmedMessage = this.message.trim();
            const trimmedNickname = this.nickname.trim();
        
            if (trimmedMessage === '' || trimmedNickname === '') {
                // Display an error message or handle it as needed
                if (trimmedMessage === '') {
                    // Handle empty message error
                    // You can show an error message to the user
                    console.log('Please enter a message before sending.');
                }
                if (trimmedNickname === '') {
                    // Handle empty nickname error
                    // You can show an error message to the user
                    console.log('Please enter a nickname before sending.');
                }
                return;
            }

            socket.emit('chat_message', {
                content: this.message,
                name: this.nickname || 'anonymous',
                id: this.socketID,
            });

            this.message = '';
        },

        catchTextFocus() {
            const user = { name: this.nickname || 'anonymous' };
            socket.emit('user_typing', user);
            this.handleUserTyping(user);
        },

        handleUserTyping(user) {
            this.usersTyping.push(user.name);
            setTimeout(() => {
                const index = this.usersTyping.indexOf(user.name);
                if (index !== -1) {
                    this.usersTyping.splice(index, 1);
                }
            }, 10000);
        },
    },

    components: {
        newmsg: ChatMsg,
    },
}).mount('#app');

const disconnectedElement = document.getElementById('disconnected');
socket.on('user_disconnect', (data) => {
    console.log(`User ${data.sID} has disconnected.`);
    disconnectedElement.style.display = 'block';
});

socket.on('connect', () => {
    console.log(`Connected: ${socket.id}`);
    disconnectedElement.style.display = 'none';
});

socket.on('connect_error', (err) => {
    console.error(`Connection error: ${err.message}`);
    disconnectedElement.style.display = 'block';
});

socket.addEventListener('connected', setUserID);
socket.addEventListener('new_message', showNewMessage);
socket.addEventListener('typing', handleUserTyping);
